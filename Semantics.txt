
Summary of combinators (assume that :-> is a type operator corresponding to
the transfer category). The basic combinators are as follows:

* map :: (t-\>u) -\> (t :-> u)

* filter :: (t-\>Bool) -\> (t :-> t)

* switch\_once :: (t -\> Maybe(t :-> u), t :-> u) -\> (t :-> u)

'Maybe' is the type constructor of a container, that may or may not contain
a single value. This combinator is based on the corresponding switching
combinator of Yampa. 'switch\_once' switches its internal transfer lazily.

* scanning :: (t,(t,u)-\>t) -\> (u :-> t)

This combinator is derivable from the other combinators.

* with\_remainder :: (t :-> u) -\> (t :-> (t :-> u, u))

'with\_remainder' is for making a copy of the present state of the internal
transfer. Such copy is used to resume the same transfer later. Resuming
also redoes any effects performed inside the transfer, from the point where
the transfer is suspended.

* identity :: t :-> t

* empty :: t :-> u

* feedback :: (t :-> t) -\> (t :-> t)

In order to reproduce the semantics of feedback, in terms of a standard
semantics of FRP, it is necessary to reconstruct semantics in the space
[[T]] -> [[U]]. The tokens of the signals are separated by the input
token that provokes them. Then feedback can be given the following
semantics:

```
zipStreams f (x:xs) ~(y:ys) = f x y : zipStreams f xs ys
zipStreams _ [] _ = []

type Signal = []

append' x x2 | null x = x
append' x x2 = x++x2

feedback2 :: (Signal[t] -> Signal[t])
	-> Signal[t] -> Signal[t]
feedback2 f xs =
	let
	ls = f(zipStreams append' xs ls) in
	ls
```

* lazy :: (() -\> (t :-> u)) -\> (t :-> u)
